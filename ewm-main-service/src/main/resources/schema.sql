DROP TABLE if exists compilations_events;
DROP TABLE if exists compilations;
DROP TABLE if exists P_Requests;
DROP TABLE if exists events;
DROP TABLE if exists locations;
DROP TABLE if exists categories;
DROP TABLE if exists users;

---
CREATE TABLE IF NOT EXISTS users (                 -- создание таблицы пользователей users
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  email VARCHAR(254) NOT NULL,
  name VARCHAR(250) NOT NULL,
  CONSTRAINT PK_USER PRIMARY KEY (id),
  CONSTRAINT UQ_USER_EMAIL UNIQUE (email)
);
---
CREATE TABLE IF NOT EXISTS categories (                 -- создание таблицы категорий (Category)
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  name VARCHAR(50) NOT NULL,
  CONSTRAINT PK_CATEGORY PRIMARY KEY (id),
  CONSTRAINT UQ_CATEGORY_NAME UNIQUE (name)
);
---
CREATE TABLE IF NOT EXISTS locations (                 -- создание таблицы локаций (Location)
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  lat FLOAT NOT NULL,
  lon FLOAT NOT NULL,
  CONSTRAINT PK_LOCATION PRIMARY KEY (id),
  CONSTRAINT UQ_LOCATION UNIQUE (lat, lon)
);
---
CREATE TABLE IF NOT EXISTS events (                 -- создание таблицы событий (Event)
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  annotation VARCHAR(2000) NOT NULL,
  category_id BIGINT NOT NULL,
  confirmed_requests BIGINT NOT NULL DEFAULT 0,
  created_on timestamp NOT NULL,
  description VARCHAR(7000) NOT NULL,
  event_date timestamp NOT NULL,
  initiator BIGINT NOT NULL,
  location BIGINT NOT NULL,
  paid BOOL NOT NULL DEFAULT FALSE,
  participant_limit INTEGER NOT NULL DEFAULT 0,
  published_on timestamp,
  request_moderation BOOL NOT NULL DEFAULT TRUE,
  state VARCHAR(20) NOT NULL,
  title VARCHAR(120) NOT NULL,
  views BIGINT NOT NULL DEFAULT 0,
  CONSTRAINT PK_EVENT PRIMARY KEY (id),
  CONSTRAINT events_categories_fk FOREIGN KEY (category_id) REFERENCES categories (id) ON DELETE RESTRICT ON UPDATE CASCADE,
  CONSTRAINT events_users_fk FOREIGN KEY (initiator) REFERENCES users (id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT events_locations_fk FOREIGN KEY (location) REFERENCES locations (id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT UQ_EVENTS UNIQUE (annotation, event_date, location)
);
---
CREATE TABLE IF NOT EXISTS P_Requests (   -- создание таблицы запросов на участие в событии (ParticipationRequest)
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created timestamp NOT NULL,
  event BIGINT NOT NULL,
  requester BIGINT NOT NULL,
  status VARCHAR(20) NOT NULL DEFAULT 'PENDING',
  CONSTRAINT PK_P_Requests PRIMARY KEY (id),
  CONSTRAINT UQ_REQUEST UNIQUE (event, requester),
  CONSTRAINT P_Requests_events_fk FOREIGN KEY (event) REFERENCES events (id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT P_Requests_users_fk FOREIGN KEY (requester) REFERENCES users (id) ON DELETE CASCADE ON UPDATE CASCADE
);
---
CREATE TABLE IF NOT EXISTS compilations (   -- создание таблицы подборок событий (Compilation)
  id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  pinned BOOL NOT NULL DEFAULT FALSE,
  title VARCHAR(50) NOT NULL,
  CONSTRAINT PK_Compilations PRIMARY KEY (id),
  CONSTRAINT CMPL_TITLE UNIQUE (title)
);
---
CREATE TABLE IF NOT EXISTS compilations_events (   -- создание таблицы подборки-события
  compilation_id BIGINT NOT NULL,
  event_id BIGINT NOT NULL,
  CONSTRAINT UN_CMP_EV UNIQUE (compilation_id, event_id),
  CONSTRAINT Comp_id_fk FOREIGN KEY (compilation_id) REFERENCES compilations (id) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT Event_id_fk FOREIGN KEY (event_id) REFERENCES events (id) ON DELETE CASCADE ON UPDATE CASCADE
);
---
